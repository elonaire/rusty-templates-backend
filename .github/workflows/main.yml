name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  PRODUCTS_SERVICE_PATHS: 'services/products/'
  ORDERS_SERVICE_PATHS: 'services/orders/'
  PAYMENTS_SERVICE_PATHS: 'services/payments/'
  SHARED_SERVICE_PATHS: 'services/shared/'
  LIB_PATHS: 'lib/'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_service_changes:
    runs-on: ubuntu-latest
    # needs: [build]
    outputs:
      products_service_should_deploy: ${{ steps.confirm_changes.outputs.PRODUCTS_SERVICE_SHOULD_DEPLOY }}
      orders_service_should_deploy: ${{ steps.confirm_changes.outputs.ORDERS_SERVICE_SHOULD_DEPLOY }}
      payments_service_should_deploy: ${{ steps.confirm_changes.outputs.PAYMENTS_SERVICE_SHOULD_DEPLOY }}
      shared_service_should_deploy: ${{ steps.confirm_changes.outputs.SHARED_SERVICE_SHOULD_DEPLOY }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: file_changes
        name: Check for Changes in Services
        run: |
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.sha }}"
          files_temp=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          files=$(echo "$files_temp" | tr "\n" " ")
          echo "changed_files=$files" >> "$GITHUB_OUTPUT"

      - id: confirm_changes
        name: Confirm Changes
        shell: bash
        run: |
          echo "Changed files: ${{ steps.file_changes.outputs.changed_files }}"
          echo "If you see here files that you have not modified, please update your branch with changes from main."

          # Check if the modified files include this path

          if echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.PRODUCTS_SERVICE_PATHS }}" || echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.LIB_PATHS }}"; then
            # Set the output variable and exit the loop
            echo "triggering_path is ${{ env.PRODUCTS_SERVICE_PATHS }}"
            echo "PRODUCTS_SERVICE_SHOULD_DEPLOY=true" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
          else
            echo "PRODUCTS_SERVICE_SHOULD_DEPLOY=false" >> "$GITHUB_OUTPUT"

          fi

          if echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.ORDERS_SERVICE_PATHS }}" || echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.LIB_PATHS }}"; then
            # Set the output variable and exit the loop
            echo "triggering_path is ${{ env.ORDERS_SERVICE_PATHS }}"
            echo "ORDERS_SERVICE_SHOULD_DEPLOY=true" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
          else
            echo "ORDERS_SERVICE_SHOULD_DEPLOY=false" >> "$GITHUB_OUTPUT"

          fi

          if echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.PAYMENTS_SERVICE_PATHS }}" || echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.LIB_PATHS }}"; then
            # Set the output variable and exit the loop
            echo "triggering_path is ${{ env.PAYMENTS_SERVICE_PATHS }}"
            echo "PAYMENTS_SERVICE_SHOULD_DEPLOY=true" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
          else
            echo "PAYMENTS_SERVICE_SHOULD_DEPLOY=false" >> "$GITHUB_OUTPUT"

          fi

          if echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.SHARED_SERVICE_PATHS }}" || echo "${{ steps.file_changes.outputs.changed_files }}" | grep -q "${{ env.LIB_PATHS }}"; then
            # Set the output variable and exit the loop
            echo "triggering_path is ${{ env.SHARED_SERVICE_PATHS }}"
            echo "SHARED_SERVICE_SHOULD_DEPLOY=true" >> "$GITHUB_OUTPUT"
            cat "$GITHUB_OUTPUT"
          else
            echo "SHARED_SERVICE_SHOULD_DEPLOY=false" >> "$GITHUB_OUTPUT"

          fi

          exit 0


  build_and_deploy_products_service:
    runs-on: ubuntu-latest
    needs: [check_service_changes]
    if: ${{ needs.check_service_changes.outputs.products_service_should_deploy == 'true' }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        # uses: docker/setup-buildx-action@v1
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "elonaire/elonaire-builder"

      - name: Build the Docker image
        run: |
          docker buildx build --build-arg SERVICE_NAME=products --build-arg PORT=3004 -t elonaire/rt-products:latest --attest type=provenance,mode=max --push .

  build_and_deploy_orders_service:
    runs-on: ubuntu-latest
    needs: [check_service_changes]
    if: ${{ needs.check_service_changes.outputs.orders_service_should_deploy == 'true' }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        # uses: docker/setup-buildx-action@v1
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "elonaire/elonaire-builder"

      - name: Build the Docker image
        run: |
          docker buildx build --build-arg SERVICE_NAME=orders --build-arg PORT=3010 -t elonaire/rt-orders:latest --attest type=provenance,mode=max --push .


  build_and_deploy_payments_service:
    runs-on: ubuntu-latest
    needs: [check_service_changes]
    if: ${{ needs.check_service_changes.outputs.payments_service_should_deploy == 'true' }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        # uses: docker/setup-buildx-action@v1
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "elonaire/elonaire-builder"

      - name: Build the Docker image
        run: |
          docker buildx build --build-arg SERVICE_NAME=payments --build-arg PORT=3013 -t elonaire/rt-payments:latest --attest type=provenance,mode=max --push .

  build_and_deploy_shared_service:
    runs-on: ubuntu-latest
    needs: [check_service_changes]
    if: ${{ needs.check_service_changes.outputs.shared_service_should_deploy == 'true' }}

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        # uses: docker/setup-buildx-action@v1
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "elonaire/elonaire-builder"

      - name: Build the Docker image
        run: |
          docker buildx build --build-arg SERVICE_NAME=shared --build-arg PORT=3016 -t elonaire/rt-shared:latest --attest type=provenance,mode=max --push .


  deploy_to_server:
    runs-on: ubuntu-latest
    needs: [build_and_deploy_products_service, build_and_deploy_orders_service, build_and_deploy_payments_service, build_and_deploy_shared_service]
    if: |
      always() &&
      (needs.build_and_deploy_products_service.result != 'failure' &&
       needs.build_and_deploy_orders_service.result != 'failure' &&
       needs.build_and_deploy_payments_service != 'failure' &&
       needs.build_and_deploy_shared_service != 'failure')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: SCP files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          # source: "docker-compose.yml,docker-compose.files.yml,docker-compose.shared.yml"
          source: "docker-compose.yml"
          target: ~/

      - name: 'Tar files'
        run: tar -cvf nginx.tar nginx/
      - name: SCP nginx.conf to server
        uses: appleboy/scp-action@v0.1.4
        with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SERVER_USERNAME }}
            password: ${{ secrets.SERVER_PASSWORD }}
            source: "nginx.tar"
            target: ~/

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          # key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            tar -xvf nginx.tar
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | CI=true docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            CI=true docker compose --env-file prod.env -f docker-compose.yml --compatibility up -d --force-recreate


  automerge:
    runs-on: ubuntu-latest

    needs: [build_and_deploy_products_service, build_and_deploy_orders_service, build_and_deploy_payments_service, build_and_deploy_shared_service, deploy_to_server]
    if: |
      always() &&
      (needs.build_and_deploy_products_service.result != 'failure' &&
       needs.build_and_deploy_orders_service.result != 'failure' &&
       needs.build_and_deploy_payments_service != 'failure' &&
       needs.build_and_deploy_shared_service != 'failure')

    steps:
      - id: automerge
        name: automerge
        uses: 'pascalgn/automerge-action@v0.15.5'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          MERGE_LABELS: ''
